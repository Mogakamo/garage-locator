// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// TODO: garage model
model Garage {
  id          String   @id @default(cuid())
  name        String
  city        String
  country     String
  phone       String
  email       String
  website     String
  description String
  services    String
  image       String
  time_open   String
  time_close  String
  // lat         Float
  // lng         Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  GarageOwners   GarageOwner? @relation(fields: [garageOwnersId], references: [id])
  garageOwnersId String?

  @@map("garages")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // accounts      Account[]
  // sessions      Session[]
  LoginToken LoginToken[]

  @@map("users")
}

model LoginToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  redirect  String   @default("/")

  @@map("login-tokens")
}

model GarageOwner {
  id        String   @id @default(cuid())
  username  String
  email     String
  Garage    Garage[]
  createdAt DateTime @default(now())

  @@map("garage-owners")
}
